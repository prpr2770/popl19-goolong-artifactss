prog(tmp, [decl(proposal,int),decl(vote,int),decl(reply,int),decl(abort,int),decl(committed,int),decl(ack,int),decl(val,map(set(dbs),int)),decl(value,map(set(dbs),int)),decl(decision,map(set(dbs),int)),decl(ackMsg,map(set(dbs),int)),decl(myVote,map(set(dbs),int)),decl(dbs,set)], ensures(and([forall([decl(i,int)],implies(and([elem(i,dbs),committed=1]),ref(value,i)=proposal)),forall([decl(i,int)],implies(and([elem(i,dbs),committed=0]),ref(value,i)=0))])), seq([assign(c,committed,0),assign(c,abort,0),for(c,A,dbs,rr,forall([decl(i,int)],implies(and([elem(i,rr)]),and([ref(value,i)=0,ref(val,i)=proposal]))),seq([assign(A,value,0),assign(A,val,c,proposal),assign(c,vote,A,myVote),ite(c,vote=0,seq([assign(c,abort,1)]),skip)])),ite(c,abort=0,seq([assign(c,reply,1),assign(c,committed,1)]),seq([assign(c,reply,0)])),for(c,A,dbs,rr,forall([decl(i,int)],and([implies(and([elem(i,rr),committed=1]),ref(value,i)=ref(val,i)),implies(and([elem(i,dbs),committed=0]),ref(value,i)=0)])),seq([assign(A,decision,c,reply),ite(A,ref(decision,A)=1,seq([assign(A,value,ref(val,A))]),skip),assign(A,ackMsg,1),assign(c,ack,A,ackMsg)]))])).
